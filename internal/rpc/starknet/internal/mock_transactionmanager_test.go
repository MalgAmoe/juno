// Code generated by MockGen. DO NOT EDIT.
// Source: ./../../../db/transaction/manager.go

// Package internal is a generated GoMock package.
package internal

import (
	reflect "reflect"

	felt "github.com/NethermindEth/juno/pkg/felt"
	types "github.com/NethermindEth/juno/pkg/types"
	gomock "github.com/golang/mock/gomock"
)

// MockTransactionManager is a mock of TransactionManager interface.
type MockTransactionManager struct {
	ctrl     *gomock.Controller
	recorder *MockTransactionManagerMockRecorder
}

// MockTransactionManagerMockRecorder is the mock recorder for MockTransactionManager.
type MockTransactionManagerMockRecorder struct {
	mock *MockTransactionManager
}

// NewMockTransactionManager creates a new mock instance.
func NewMockTransactionManager(ctrl *gomock.Controller) *MockTransactionManager {
	mock := &MockTransactionManager{ctrl: ctrl}
	mock.recorder = &MockTransactionManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransactionManager) EXPECT() *MockTransactionManagerMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockTransactionManager) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockTransactionManagerMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockTransactionManager)(nil).Close))
}

// GetReceipt mocks base method.
func (m *MockTransactionManager) GetReceipt(txHash *felt.Felt) (types.TxnReceipt, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReceipt", txHash)
	ret0, _ := ret[0].(types.TxnReceipt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReceipt indicates an expected call of GetReceipt.
func (mr *MockTransactionManagerMockRecorder) GetReceipt(txHash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReceipt", reflect.TypeOf((*MockTransactionManager)(nil).GetReceipt), txHash)
}

// GetTransaction mocks base method.
func (m *MockTransactionManager) GetTransaction(txHash *felt.Felt) (types.IsTransaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransaction", txHash)
	ret0, _ := ret[0].(types.IsTransaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransaction indicates an expected call of GetTransaction.
func (mr *MockTransactionManagerMockRecorder) GetTransaction(txHash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransaction", reflect.TypeOf((*MockTransactionManager)(nil).GetTransaction), txHash)
}

// PutReceipt mocks base method.
func (m *MockTransactionManager) PutReceipt(txHash *felt.Felt, txReceipt types.TxnReceipt) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutReceipt", txHash, txReceipt)
	ret0, _ := ret[0].(error)
	return ret0
}

// PutReceipt indicates an expected call of PutReceipt.
func (mr *MockTransactionManagerMockRecorder) PutReceipt(txHash, txReceipt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutReceipt", reflect.TypeOf((*MockTransactionManager)(nil).PutReceipt), txHash, txReceipt)
}

// PutTransaction mocks base method.
func (m *MockTransactionManager) PutTransaction(txHash *felt.Felt, tx types.IsTransaction) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutTransaction", txHash, tx)
	ret0, _ := ret[0].(error)
	return ret0
}

// PutTransaction indicates an expected call of PutTransaction.
func (mr *MockTransactionManagerMockRecorder) PutTransaction(txHash, tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutTransaction", reflect.TypeOf((*MockTransactionManager)(nil).PutTransaction), txHash, tx)
}
