"use strict";(self.webpackChunkjuno_docs=self.webpackChunkjuno_docs||[]).push([[2911],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return d}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var u=r.createContext({}),l=function(e){var t=r.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=l(e.components);return r.createElement(u.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,u=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),f=l(n),d=a,m=f["".concat(u,".").concat(d)]||f[d]||p[d]||o;return n?r.createElement(m,i(i({ref:t},c),{},{components:n})):r.createElement(m,i({ref:t},c))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=f;var s={};for(var u in t)hasOwnProperty.call(t,u)&&(s[u]=t[u]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var l=2;l<o;l++)i[l]=n[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},7343:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return s},contentTitle:function(){return u},metadata:function(){return l},toc:function(){return c},default:function(){return f}});var r=n(7462),a=n(3366),o=(n(7294),n(3905)),i=["components"],s={title:"StarkNet State Integration"},u=void 0,l={unversionedId:"future_implementations/starknet-state",id:"future_implementations/starknet-state",title:"StarkNet State Integration",description:"In order to archive the full StarkNet State integration, we need to first implement a",source:"@site/docs/future_implementations/starknet-state.mdx",sourceDirName:"future_implementations",slug:"/future_implementations/starknet-state",permalink:"/docs/future_implementations/starknet-state",editUrl:"https://github.com/NethermindEth/juno/tree/main/docs/docs/future_implementations/starknet-state.mdx",tags:[],version:"current",frontMatter:{title:"StarkNet State Integration"},sidebar:"tutorialSidebar",previous:{title:"Layer 1 Integration",permalink:"/docs/future_implementations/l1-integration"},next:{title:"Feeder Gateway Middleware",permalink:"/docs/future_implementations/voyager"}},c=[],p={toc:c};function f(e){var t=e.components,n=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"In order to archive the full StarkNet State integration, we need to first implement a\n",(0,o.kt)("a",{parentName:"p",href:"/docs/features/feeder-gateway"},"Feeder Gateway Client"),", after that, we should be able to get the state from the Gateway iterating\nover all the blocks, from block 0 to the latest."),(0,o.kt)("p",null,"First we need to build the StarkNet State, as described ",(0,o.kt)("a",{parentName:"p",href:"https://starknet.io/documentation/starknet-state/"},"here"),"."),(0,o.kt)("p",null,"After that, we will need to iterate over all the previous state updates, and update our state, making a sequence of calls\nto get_state_update using the feeder gateway. We should receive a set of requests like this:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "block_hash" : "hash",\n  "old_root" : "hash",\n  "new_root" : "hash",\n  "state_diff" : {\n    "deployed_contracts" : [\n      "addresses"\n    ],\n    "storage_diffs" : [\n      {\n        "hash" : [\n          {\n            "key" : "hash",\n            "value" : "hash"\n          }\n        ]\n      }\n    ]\n  }\n\n}\n')),(0,o.kt)("p",null,"An example request can be found calling ",(0,o.kt)("a",{parentName:"p",href:"https://alpha4.starknet.io/feeder_gateway/get_state_update?block_number=1"},"this"),"."),(0,o.kt)("p",null,"Using this info, we should iterate over the StarkNet State and update it."))}f.isMDXComponent=!0}}]);